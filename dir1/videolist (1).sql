-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- 主機： 127.0.0.1
-- 產生時間： 2025-06-10 04:56:24
-- 伺服器版本： 10.4.32-MariaDB
-- PHP 版本： 8.0.30

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- 資料庫： `videolist`
--

-- --------------------------------------------------------

--
-- 資料表結構 `answer`
--

CREATE TABLE `answer` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `quiz_id` int(11) NOT NULL,
  `selected_option` varchar(255) DEFAULT NULL,
  `is_correct` tinyint(1) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `answered_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `source` varchar(10) DEFAULT 'local',
  `question` text DEFAULT NULL,
  `option1` text DEFAULT NULL,
  `option2` text DEFAULT NULL,
  `option3` text DEFAULT NULL,
  `option4` text DEFAULT NULL,
  `video_id` varchar(50) DEFAULT NULL,
  `answer` text DEFAULT NULL,
  `answer_index` int(11) DEFAULT -1,
  `answer_text` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- 傾印資料表的資料 `answer`
--

INSERT INTO `answer` (`id`, `user_id`, `quiz_id`, `selected_option`, `is_correct`, `created_at`, `answered_at`, `source`, `question`, `option1`, `option2`, `option3`, `option4`, `video_id`, `answer`, `answer_index`, `answer_text`) VALUES
(1044, 123, -1, '0', 1, '2025-06-10 01:36:39', '2025-06-10 01:36:39', 'gpt', '什麼是佛回圈？', '一種類似懷回圈的結構，但需要三個條件', '一種專門用來印出數字的函數', '一種儲存資料的結構', '一種檢查程式錯誤的方法', 'jYSBsUjXXog', '一種類似懷回圈的結構，但需要三個條件', 0, NULL),
(1045, 123, -1, '2', 0, '2025-06-10 01:36:39', '2025-06-10 01:36:39', 'gpt', '在佛回圈中第一個位置應該放什麼？', '結束條件', '初始條件', '遞減操作', '判斷變數', 'jYSBsUjXXog', '初始條件', 1, NULL),
(1046, 123, -1, '1', 1, '2025-06-10 01:36:39', '2025-06-10 01:36:39', 'gpt', '下列哪個符號通常用於表示乘法？', '+', '-', '*', '/', 'jYSBsUjXXog', '*', 0, NULL),
(1047, 123, -1, '0', 1, '2025-06-10 01:36:39', '2025-06-10 01:36:39', 'gpt', '如何在 print 方法中不換行？', '使用 print 取代 println', '指定分隔符號', '使用 getline 方法', '加入換行符號', 'jYSBsUjXXog', '使用 print 取代 println', 0, NULL),
(1048, 123, -1, '2', 0, '2025-06-10 01:36:39', '2025-06-10 01:36:39', 'gpt', '要讓一個浮回圈從 2 執行到 9，外層的變數應從多少開始逐步增加？', '從 0 開始', '從 2 開始', '從 1 開始', '從 9 開始', 'jYSBsUjXXog', '從 2 開始', 1, NULL);

-- --------------------------------------------------------

--
-- 資料表結構 `quiz`
--

CREATE TABLE `quiz` (
  `id` int(11) NOT NULL,
  `video_id` varchar(100) DEFAULT NULL,
  `question` text DEFAULT NULL,
  `option1` text DEFAULT NULL,
  `option2` text DEFAULT NULL,
  `option3` text DEFAULT NULL,
  `option4` text DEFAULT NULL,
  `correct_index` int(11) DEFAULT NULL,
  `explanation` text DEFAULT NULL,
  `source` varchar(10) DEFAULT 'local'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- 傾印資料表的資料 `quiz`
--

INSERT INTO `quiz` (`id`, `video_id`, `question`, `option1`, `option2`, `option3`, `option4`, `correct_index`, `explanation`, `source`) VALUES
(9, 'jYSBsUjXXog', '下列關於 for 迴圈語法的敘述，何者正確？', 'for 迴圈只能寫在 Java 的 main 方法外面', 'for 迴圈內一定要宣告三個變數', 'for 迴圈通常會在小括號內宣告初始變數', 'for 迴圈和 while 迴圈不能做一樣的事情', 2, 'for 通常會在括號中宣告初始變數', 'local'),
(10, 'jYSBsUjXXog', '請問 99 乘法表「每一行」數字的變化，主要是靠什麼方式產生？', '只用一個 for 迴圈控制所有變化', '巢狀兩層迴圈（外圈與內圈分別控制）', '使用 switch-case 判斷每一行', '用 if-else 來列出所有情況', 1, '使用巢狀兩層迴圈控制乘法表輸出', 'local'),
(11, 'jYSBsUjXXog', '在教學中，講者說明 print 與 println 差異，下列何者說明正確？', 'print 會自動換行，println 不會', 'println 會自動換行，print 不會', '兩者都會換行', '兩者都不會換行', 1, 'println 會自動換行', 'local'),
(12, 'jYSBsUjXXog', '下列哪一個數字的範圍，最能代表 99 乘法表「被乘數」與「乘數」的迴圈起始與結束？', '1 到 10', '2 到 9', '1 到 100', '0 到 99', 1, '標準 99 乘法表從 2 到 9', 'local'),
(13, 'jYSBsUjXXog', '教學影片最後提到，將外層的 while 迴圈改成 for 迴圈，這樣做的好處為何？', '可以讓程式碼更簡潔、結構更清楚', '只能增加程式碼長度', '讓變數範圍無法控制', '必須手動調整每個數字', 0, '使用 for 結構更清晰，程式更簡潔', 'local'),
(14, 'jYSBsUjXXog', '在 Java 中，如果你希望定義一個只能在某個 for 迴圈中使用的變數，應將此變數放在語法中的哪個位置？', 'for 的外面', 'for 的裡面', '整個程式的最上方', 'if 語句的裡面', 1, '根據影片內容產生的題目', 'gpt'),
(15, 'jYSBsUjXXog', '使用 for 迴圈建立九九乘法表時，外層迴圈控制的變數應該代表什麼意義？', '固定乘數', '被乘數的範圍', '迴圈的次數', '乘積的形式', 0, '根據影片內容產生的題目', 'gpt'),
(16, 'jYSBsUjXXog', '若要讓程式打印九九乘法表，println 需替換成什麼以避免每次輸出後自動換行？', 'print', 'printf', 'system.out', 'none', 0, '根據影片內容產生的題目', 'gpt'),
(17, 'jYSBsUjXXog', '將一個變數在回圈開始時設置為2，並要求執行到小於10，在回圈結束時進行遞增，此處的條件是控制迴圈執行幾次？', '8 次', '9 次', '10 次', '11 次', 0, '根據影片內容產生的題目', 'gpt'),
(18, 'jYSBsUjXXog', '在印出九九乘法表的程式中，如何確保每兩個相同乘數的運算結果之間有空格以提高易讀性？', '在 print 的字串中加入空格', '定期使用 println', '使用 	 分隔符', '使用 \'+\' 操作符', 0, '根據影片內容產生的題目', 'gpt'),
(19, 'jYSBsUjXXog', '在 Java 中，for 迴圈通常用來做什麼？', '執行無限次的迴圈', '重複執行特定次數的指令', '僅用於處理字串', '用來顯示錯誤訊息', 1, '根據影片內容產生的題目', 'gpt'),
(20, 'jYSBsUjXXog', '在 for 迴圈的語法中，哪一項是用來檢查迴圈是否應該繼續？', '初始條件', '執行條件', '更新條件', '結束條件', 1, '根據影片內容產生的題目', 'gpt'),
(21, 'jYSBsUjXXog', '在 for 迴圈中，如果變數是宣告在迴圈內部，其作用範圍為何？', '整個程式', '僅限該迴圈內部', '在迴圈外也可使用', '在類別之內', 1, '根據影片內容產生的題目', 'gpt'),
(22, 'jYSBsUjXXog', '如何讓 for 迴圈在不會自動換行的情況下顯示結果？', '使用 Print 方法', '使用 Println 方法', '使用 System.out 方法', '使用 Console 方法', 0, '根據影片內容產生的題目', 'gpt'),
(23, 'jYSBsUjXXog', '在用 for 迴圈製作 99 乘法表時，外層的迴圈通常控制哪個數字？', '被乘數', '乘數', '結果', '次方數', 0, '根據影片內容產生的題目', 'gpt'),
(24, 'jYSBsUjXXog', '什麼是佛回圈的最基本用途?', '控制程式執行次數', '儲存資料', '提高執行效率', '減少程式碼', 0, '根據影片內容產生的題目', 'gpt'),
(25, 'jYSBsUjXXog', '在佛回圈中，哪一個部分負責設定初始條件?', '第一個位置', '第二個位置', '第三個位置', '第四個位置', 0, '根據影片內容產生的題目', 'gpt'),
(26, 'jYSBsUjXXog', '如何在Java中宣告一個變數只供當前回圈使用?', '在佛回圈內宣告', '在佛回圈外宣告', '使用全域變數', '使用靜態變數', 0, '根據影片內容產生的題目', 'gpt'),
(27, 'jYSBsUjXXog', '如何讓Java中的print方法不進行換行?', '使用Print', '使用Println', '移除換行符號', '使用持續模式', 0, '根據影片內容產生的題目', 'gpt'),
(28, 'jYSBsUjXXog', '在99乘法表的例子中，哪個變數控制乘法行的數字?', 'J', 'I', 'K', 'L', 0, '根據影片內容產生的題目', 'gpt'),
(29, 'jYSBsUjXXog', '佛回圈中的第一個元素代表什麼？', '初始條件', '判斷條件', '步驟', '結果', 0, '根據影片內容產生的題目', 'gpt'),
(30, 'jYSBsUjXXog', '在Java中，為什麼一般不會把佛回圈的控制變數宣告在外面？', '增加程式碼風險', '浪費記憶體', '影響程式結構', '變數範圍控制', 3, '根據影片內容產生的題目', 'gpt'),
(31, 'jYSBsUjXXog', '在99乘法表的製作中，使用佛回圈調整哪個變數可以達成多行顯示的效果？', 'i', 'j', 'x', 'y', 1, '根據影片內容產生的題目', 'gpt'),
(32, 'jYSBsUjXXog', '如何避免Java中的Print方法自動換行？', '使用Print代替Println', '調整程式碼格式', '更改輸出裝置', '增強自動換行功能', 0, '根據影片內容產生的題目', 'gpt'),
(33, 'jYSBsUjXXog', '在Java中，如何讓一個回圈執行特定次數？', '設置正確的初始條件與判斷條件', '使用更多的回圈', '調整匯編器參數', '加強變數控制', 0, '根據影片內容產生的題目', 'gpt'),
(34, 'jYSBsUjXXog', '在撰寫佛回圈時，變數i的初始條件通常要設置為多少？', '0', '1', '100', 'i', 0, '根據影片內容產生的題目', 'gpt'),
(35, 'jYSBsUjXXog', '在Java的佛回圈中，第三個參數通常用於什麼目的？', '設置初始條件', '執行結束後的操作', '檢查條件', '無特定目的', 1, '根據影片內容產生的題目', 'gpt'),
(36, 'jYSBsUjXXog', '為什麼在Java中，通常不會在佛回圈外部宣告控制變數i？', '因為i會超出內存範圍', '因為i的值會被保留，影響後續程式運行', '因為會導致編譯錯誤', '因為i不能在回圈外使用', 1, '根據影片內容產生的題目', 'gpt'),
(37, 'jYSBsUjXXog', '在Java中，如果要讓輸出不換行，應該使用哪個方法？', 'Println', 'Print', 'Write', 'Show', 1, '根據影片內容產生的題目', 'gpt'),
(38, 'jYSBsUjXXog', '如何讓Java中的佛回圈從1執行到9？', '設置初始值為1，結束值為9', '設置初始值為1，條件為i<10', '設置初始值為0，條件為i<=9', '設置初始值為1，條件為i<=10', 1, '根據影片內容產生的題目', 'gpt'),
(39, 'jYSBsUjXXog', '在 Java 中，佛回圈的主要組成部分有哪些？', '初始條件、判斷條件、增量表達式', '初始條件、增量表達式、結束條件', '初始值、增量值、停止值', '開始條件、增量條件、結束條件', 0, '根據影片內容產生的題目', 'gpt'),
(40, 'jYSBsUjXXog', '在 Java 的 99 乘法表中，如何讓 J 從 2 跑到 9？', '使用佛回圈控制 J 的範圍', '使用懷回圈控制 J 的範圍', '直接指定 J 的範圍', '手動更改 J 的值', 1, '根據影片內容產生的題目', 'gpt'),
(41, 'jYSBsUjXXog', '以下哪項是佛回圈中的增量表達式常見的語法？', 'i++', 'i--', 'i += 2', '以上皆是', 3, '根據影片內容產生的題目', 'gpt'),
(42, 'jYSBsUjXXog', '如何在列印時不讓每次輸出換行？', '使用 println', '使用 printf', '使用 print', '使用 format', 2, '根據影片內容產生的題目', 'gpt'),
(43, 'jYSBsUjXXog', '在 Java 中，將變數宣告在佛回圈內部與外部的主要區別是什麼？', '內部宣告的變數只在該佛回圈內部有效', '內部宣告的變數可以在外部使用', '外部宣告的變數不能在佛回圈中使用', '內部宣告的變數無法被初始化', 0, '根據影片內容產生的題目', 'gpt'),
(44, 'jYSBsUjXXog', '若要讓變數在迴圈執行完後保留其值，該如何宣告？', '在迴圈外宣告', '在迴圈內宣告', '使用全域變數', '使用靜態變數', 0, '根據影片內容產生的題目', 'local'),
(45, 'jYSBsUjXXog', '在 for 迴圈中，條件判斷式的位置在哪裡？', '第一個位置', '第二個位置', '第三個位置', '第四個位置', 1, '根據影片內容產生的題目', 'local'),
(46, 'jYSBsUjXXog', '在 for 迴圈中，常見用來表示增加計數器的語法為何？', 'i--', 'i++', 'i-=', 'i+=', 1, '根據影片內容產生的題目', 'local'),
(47, 'jYSBsUjXXog', '為什麼在使用 Print 和 Println 時，結果有所不同？', 'Print 會換行', 'Print 不會換行', 'Println 不會換行', '兩者作用相同', 1, '根據影片內容產生的題目', 'local'),
(48, 'jYSBsUjXXog', '如果要印出九九乘法表，應該用幾層迴圈？', '1 層', '2 層', '3 層', '4 層', 1, '根據影片內容產生的題目', 'local'),
(49, 'jYSBsUjXXog', '在 Java 中，for 迴圈與 while 迴圈有什麼不同？', 'for 迴圈需有三個部分', 'while 迴圈無需初始條件', 'for 迴圈只能在特定情況下使用', 'while 迴圈需有三個部分', 0, '根據影片內容產生的題目', 'local'),
(50, 'jYSBsUjXXog', '在 Java 中，如何在 for 迴圈中定義變數，使其範圍僅限於迴圈內？', '在迴圈外部預先定義', '在迴圈內部定義', '使用全域變數', '在類別中定義', 1, '根據影片內容產生的題目', 'local'),
(51, 'jYSBsUjXXog', 'Java 中，若要避免 for 迴圈中的變數在迴圈外被使用，應如何處理？', '在迴圈中宣告變數', '使用靜態變數', '使用全域變數', '在外部方法中宣告變數', 0, '根據影片內容產生的題目', 'local'),
(52, 'jYSBsUjXXog', '下面哪一種方法可以在 Java 中讓程式輸出後不自動換行？', '使用 Println', '使用 System.out.print()', '使用 Print()', '使用 Printwriter', 1, '根據影片內容產生的題目', 'local'),
(53, 'jYSBsUjXXog', '在 99 乘法表中，若要改進為兩個 for 迴圈嵌套的結構，外層 for 迴圈的範圍應如何設置？', '從 1 到 10', '從 2 到 10', '從 0 到 9', '從 1 到 9', 1, '根據影片內容產生的題目', 'local'),
(54, 'jYSBsUjXXog', '佛回圈中的第一個位置通常用來做什麼？', '裝初始條件', '判斷條件', '增加或減少計數', '結束回圈', 0, '根據影片內容產生的題目', 'local'),
(55, 'jYSBsUjXXog', '在 Java 中，佛回圈中可以直接宣告變數，這樣的變數範圍是什麼？', '整個程式', '佛回圈內', '懷回圈內', '程式任何地方', 1, '根據影片內容產生的題目', 'local'),
(56, 'jYSBsUjXXog', '在 99 乘法表實例中，哪一個回圈負責控制行的變化？', '外層懷回圈', '內層佛回圈', '單一懷回圈', '單一佛回圈', 0, '根據影片內容產生的題目', 'local'),
(57, 'jYSBsUjXXog', '在使用 Print 函數時，該方法有什麼特性？', '會換行', '不會換行', '只顯示變數', '只顯示字串', 1, '根據影片內容產生的題目', 'local'),
(58, 'jYSBsUjXXog', '在 99 乘法表的製作中，如何控制行與行之間的換行？', '使用 Print 函數', '使用 Println 函數空內容', '使用 Tab 鍵', '使用重複的 Print', 1, '根據影片內容產生的題目', 'local'),
(59, 'jYSBsUjXXog', '什麼是佛回圈的初始條件？', '定義變數初始值', '判斷回圈結束的條件', '設定每次迭代後的操作', '顯示變數的計算結果', 0, '根據影片內容產生的題目', 'local'),
(60, 'jYSBsUjXXog', '在Java中，如果將變數宣告在佛回圈內，該變數的作用域如何？', '僅限佛回圈內部', '整個方法內都可使用', '任意位置都能使用', '無法再使用', 0, '根據影片內容產生的題目', 'local'),
(61, 'jYSBsUjXXog', '如何在Java中使Print函數不換行？', '使用Print而非Println', '在Println中加入特定參數', '使用特殊格式的Println', '無法控制Println換行', 0, '根據影片內容產生的題目', 'local'),
(62, 'jYSBsUjXXog', '什麼情況下需要在Java中使用兩層回圈？', '需要處理巢狀結構的數據', '單一條件需重複多次', '執行單一緊急事件', '取得用家輸入', 0, '根據影片內容產生的題目', 'local'),
(63, 'jYSBsUjXXog', '在製作九九乘法表時，為何需要在外層使用回圈？', '控制外層變數', '初始化內層變數', '管理內層回圈的迭代次數', '生成輸出格式', 0, '根據影片內容產生的題目', 'local'),
(64, 'jYSBsUjXXog', '什麼是佛回圈的初始條件？', '放條件的第一個位置', '放條件的第二個位置', '放條件的第三個位置', '放在回圈執行完畢之後', 0, '根據影片內容產生的題目', 'local'),
(65, 'jYSBsUjXXog', '在Java的佛回圈中，變數的宣告有什麼特點？', '變數只能在外面宣告', '可以在佛回圈的小瓜號裡宣告', '不能在佛回圈裡宣告', '變數的範圍不受影響', 1, '根據影片內容產生的題目', 'local'),
(66, 'jYSBsUjXXog', '99乘法表中，如何使每一行運算結果不換行？', '使用printf', '使用printLn', '使用print', '每行結束時加上分號', 2, '根據影片內容產生的題目', 'local'),
(67, 'jYSBsUjXXog', '在創建99乘法表時，如何避免複製貼上來完成各行計算？', '使用多個for迴圈', '把變數換成j，用另外一個迴圈變化j', '用更複雜的方法', '直接手寫每一行', 1, '根據影片內容產生的題目', 'local'),
(68, 'jYSBsUjXXog', '如何在99乘法表中增加易讀性？', '不使用空格', '使用空格分隔每個計算結果', '只在結束時換行', '用分號代替空格', 1, '根據影片內容產生的題目', 'local'),
(69, 'jYSBsUjXXog', '在Java中，for迴圈中可以宣告變數的範圍是哪種情況？', '僅限於迴圈內部', '在程序全域可見', '僅限於函數內部', '在程序全域不可見', 0, '根據影片內容產生的題目', 'local'),
(70, 'jYSBsUjXXog', '在使用for迴圈時，初始條件通常是用來做什麼的？', '決定迴圈的終止條件', '控制變數的增減操作', '定義循環變數的初始值', '辨識數據的類型', 2, '根據影片內容產生的題目', 'local'),
(71, 'jYSBsUjXXog', '如何讓for迴圈的變數在迴圈外部不可見？', '在for迴圈內部宣告變數', '將變數設為全域變數', '在函數外部初始化變數', '不同步變數的狀態', 0, '根據影片內容產生的題目', 'local'),
(72, 'jYSBsUjXXog', '要建立一個九九乘法表，哪個迴圈屬性最適合嵌套使用？', '單一while迴圈', '雙重for迴圈', '雙重do-while迴圈', 'for和do-while的組合', 1, '根據影片內容產生的題目', 'local'),
(73, 'jYSBsUjXXog', '以下哪項是印出九九乘法表美化結果的方法？', '使用print()避免換行', '只用printLine()不加空格', '維持原始結果不做改變', '手動控制印出格式', 0, '根據影片內容產生的題目', 'local'),
(74, 'jYSBsUjXXog', '在 Java 中，for 迴圈與 while 迴圈的主要差異是什麼？', 'for 迴圈只能遞增，while 迴圈則可以遞減。', 'for 迴圈需要在宣告時指定初始值、條件與遞增(減)方式。', 'for 迴圈只能用於數字的遞增，而 while 迴圈可以用於任何情況。', 'while 迴圈允許更複雜的條件設定。', 1, '根據影片內容產生的題目', 'local'),
(75, 'jYSBsUjXXog', '在 Java 中，如果在 for 迴圈中宣告變數，變數的範圍為何？', '僅在該 for 迴圈內部可見', '整個方法中皆可見', '整個類別中皆可見', '與全域變數範圍相同', 0, '根據影片內容產生的題目', 'local'),
(76, 'jYSBsUjXXog', '如何才能在 for 迴圈中實現九九乘法表的各行分段？', '使用 print 方法而不是 println 方法。', '在每行結束時自行計算換行。', '在 for 迴圈中插入一個 println 方法來換行。', '每次輸出完一行數字後重啟系統。', 2, '根據影片內容產生的題目', 'local'),
(77, 'jYSBsUjXXog', '如何讓 for 迴圈中變數 i 從 1 遞增到 9？', '將初始值設定為 1 並條件設定為 i 小於等於 9', '使用 while 迴圈替代 for 迴圈', '將遞增步驟設定為 i+=2', '直接將 i 設定為 9 然後反向遞減', 0, '根據影片內容產生的題目', 'local'),
(78, 'jYSBsUjXXog', '如果需要在 for 迴圈內進行更複雜的條件運算，如乘法運算，應該如何操作？', '直接在 for 迴圈的語句區塊中進行計算。', '必須使用其他語言的函數庫才能完成。', '在迴圈外部先計算好再傳入。', '在條件區域使用運算符。', 0, '根據影片內容產生的題目', 'local'),
(79, 'jYSBsUjXXog', '佛回圈（for loop）中的三個必需元素是什麼？', '初始化、條件、增加步伐', '變數、條件、減少步伐', '開始、停止、跳過', '初始值、終止值、中間值', 0, '根據影片內容產生的題目', 'local'),
(80, 'jYSBsUjXXog', '在Java中，為什麼有時候會把回圈控制變數宣告在佛回圈內部？', '因為這樣可以提升程式的效率', '因為這樣變數只在回圈內部有效', '因為這樣可使變數在其他地方能被使用', '因為這樣便於除錯', 1, '根據影片內容產生的題目', 'local'),
(81, 'jYSBsUjXXog', '如何在Java中避免Println自動換行？', '使用Print函數', '加上\\n在字串結尾', '調高Println的行距', '在Println中加上一個空格', 0, '根據影片內容產生的題目', 'local'),
(82, 'jYSBsUjXXog', '如果在一個佛回圈裡變數i的初始值是1，結束條件是i<10，執行完一次加一（i++），回圈會執行多少次？', '9次', '10次', '11次', '8次', 0, '根據影片內容產生的題目', 'local'),
(83, 'jYSBsUjXXog', '一個for回圈的變數宣告在外部和內部有什麼區別？', '外部宣告的變數可持續在其他程式碼中使用，內部宣告的變數僅限於回圈內', '沒有區別', '內部宣告的變數比外部宣告的快', '內部宣告的變數將在整個程式中重複使用', 0, '根據影片內容產生的題目', 'local'),
(84, 'jYSBsUjXXog', '在Java的for迴圈中，初始條件放在哪個位置？', '第一個位置', '第二個位置', '第三個位置', '第四個位置', 0, '根據影片內容產生的題目', 'local'),
(85, 'jYSBsUjXXog', '在Java中，若將變數宣告在for迴圈的括號內，該變數的範圍是？', '整個類別', '主函數', '該for迴圈', '整個程式', 2, '根據影片內容產生的題目', 'local'),
(86, 'jYSBsUjXXog', '下列哪個運算能正確計算99乘法表中的\'3乘5\'結果並輸出？', '3 + 5', '3 x 5', '3 * 5', '3 & 5', 2, '根據影片內容產生的題目', 'local'),
(87, 'jYSBsUjXXog', '如果在Java的print方法後不加Ln，會發生什麼事？', '輸出後換行', '輸出後不換行', '輸出後清空', '輸出後中斷', 1, '根據影片內容產生的題目', 'local'),
(88, 'jYSBsUjXXog', '在99乘法表的範例中，如何讓程序自動生成從2到9的乘法？', '使用9個for迴圈', '更改初始條件', '使用嵌套迴圈', '手動輸入結果', 2, '根據影片內容產生的題目', 'local'),
(89, 'jYSBsUjXXog', '在 Java 中，佛回圈一般包含幾個主要的部分？', '一個', '兩個', '三個', '四個', 2, '根據影片內容產生的題目', 'local'),
(90, 'jYSBsUjXXog', '在佛回圈中，哪一個部分決定是否繼續執行回圈？', '初始條件', '判斷條件', '結束操作', '創建變數', 1, '根據影片內容產生的題目', 'local'),
(91, 'jYSBsUjXXog', '在 Java 中，如果變數在佛回圈括號內被宣告，這個變數的生存範圍是？', '全局', '整個類', '僅限於該佛回圈', '整個方法', 2, '根據影片內容產生的題目', 'local'),
(92, 'jYSBsUjXXog', '如何在 Java 的 print 方法中防止自動換行？', '使用 PrintLine()', '使用 Print()', '使用 PrintWithNoL()', '使用 JustPrint()', 1, '根據影片內容產生的題目', 'local'),
(93, 'jYSBsUjXXog', '要在 Java 中印出 99 乘法表，需要嵌套多少個回圈？', '一個', '兩個', '三個', '四個', 1, '根據影片內容產生的題目', 'local'),
(94, 'jYSBsUjXXog', '什麼是佛回圈中的初始條件？', '判斷條件', '計數器增量', '變數i的初始值', '執行區塊的內容', 2, '根據影片內容產生的題目', 'local'),
(95, 'jYSBsUjXXog', '在Java中，為什麼要將變數宣告在佛回圈的小括號中？', '為了提升性能', '讓變數作用範圍受到限制', '便於DEBUG', '增加程式的可讀性', 1, '根據影片內容產生的題目', 'local'),
(96, 'jYSBsUjXXog', '如何確認在佛回圈中已經走完從1到9的所有數字？', '確認i的值不再增加', '檢查是否達到中止條件i<10', '檢查變數是否未更改', '觀察執行結果', 1, '根據影片內容產生的題目', 'local'),
(97, 'jYSBsUjXXog', '在九九乘法表的例子中，為何使用兩層回圈？', '為了方便維護', '不可能僅用一層回圈完成', '需要遍歷9種乘法計算', '想節約系統資源', 2, '根據影片內容產生的題目', 'local'),
(98, 'jYSBsUjXXog', '若要將外層懷回圈改為佛回圈，應做到什麼？', '修改變數初始化方法', '更改判斷條件與增量', '進行複數結果控制', '不需要進行任何修改', 1, '根據影片內容產生的題目', 'local'),
(99, 'jYSBsUjXXog', '在Java中，for迴圈中變數\'scope\'的特點是什麼？', '可以在for迴圈外部使用', '只能在for迴圈內部使用', '可以選擇在for迴圈內部或外部使用', '無法在for迴圈內部使用', 1, '根據影片內容產生的題目', 'local'),
(100, 'jYSBsUjXXog', '在使用for迴圈時，以下哪項是初始條件的一部分？', '求和操作', '變數迴圈', '變數i的初始值', '輸出結果', 2, '根據影片內容產生的題目', 'local'),
(101, 'jYSBsUjXXog', '一個典型的for迴圈會執行幾次，如果初始值是0，條件是小於5，i++為迴圈增量？', '5次', '4次', '6次', '無限次', 0, '根據影片內容產生的題目', 'local'),
(102, 'jYSBsUjXXog', '如何在for迴圈中產生九九乘法表的每一行？', '使用if條件', '嵌套for迴圈', '只用一個for迴圈', '使用while迴圈', 1, '根據影片內容產生的題目', 'local'),
(103, 'jYSBsUjXXog', '當for迴圈中最後條件不再滿足時，迴圈會如何？', '繼續執行迴圈', '跳回初始條件', '退出迴圈', '重新計算條件', 2, '根據影片內容產生的題目', 'local'),
(104, 'jYSBsUjXXog', '在 Java 中，若要控制 for 迴圈的次數，最常用的變數是什麼？', 'n', 'x', 'i', 'j', 2, '根據影片內容產生的題目', 'local'),
(105, 'jYSBsUjXXog', '在 Java 裡，for 迴圈中不會被重複執行的條件是哪一個部分？', '初始條件', '判斷條件', '增量', '內容區塊', 0, '根據影片內容產生的題目', 'local'),
(106, 'jYSBsUjXXog', '如何在 Java 中讓 for 迴圈從 1 到 9 運行？', 'for(i = 1; i <= 9; i++)', 'for(i = 0; i < 9; i++)', 'for(i = 1; i < 9; i++)', 'for(i = 0; i <= 9; i++)', 0, '根據影片內容產生的題目', 'local'),
(107, 'jYSBsUjXXog', '99 乘法表在 Java 中的迴圈使用了哪兩種迴圈類型？', 'for 和 do-while', 'while 和 do-while', 'for 和 while', 'do-while 和 for', 2, '根據影片內容產生的題目', 'local'),
(108, 'jYSBsUjXXog', '在使用 System.out.print 時，如何不換行？', '使用 System.out.println()', '使用 System.out.print()', '在字串後加 \'\\n\'', '不可能實現不換行', 1, '根據影片內容產生的題目', 'local'),
(109, 'jYSBsUjXXog', '以下哪個選項正確描述了佛回圈的基本結構？', '起始條件, 判斷條件, 增量/減量', '判斷條件, 起始條件, 增量/減量', '增量/減量, 起始條件, 判斷條件', '起始條件, 增量/減量, 判斷條件', 0, '根據影片內容產生的題目', 'local'),
(110, 'jYSBsUjXXog', '在以下哪種情況下，佛回圈中的變數不會超出作用域？', '變數在佛回圈外部宣告', '變數在佛回圈內部宣告', '變數在佛回圈內部和外部都宣告', '變數在程式的最開頭宣告', 1, '根據影片內容產生的題目', 'local'),
(111, 'jYSBsUjXXog', '怎麼樣可以讓佛回圈從1執行到9？', '設i的起始值為0，條件為i<9', '設i的起始值為1，條件為i<=9', '設i的起始值為1，條件為i<10', '設i的起始值為0，條件為i<=9', 2, '根據影片內容產生的題目', 'local'),
(112, 'jYSBsUjXXog', '以下哪個選項正確描述了懷回圈和佛回圈的不同點？', '懷回圈需要額外的停止條件', '佛回圈需要指定初始值、判斷條件和增量', '懷回圈更適合固定次數的執行', '佛回圈只能用在數字運算', 1, '根據影片內容產生的題目', 'local'),
(113, 'jYSBsUjXXog', '在99乘法表中，若要讓每次結果顯示在同一行，以下哪種方法是最合適的？', '使用 print 方法來輸出，不換行', '使用 printLine 方法並加上換行符號', '使用 printLine 方法，並在每次輸出後換行', '使用 printf 方法格式化輸出，換行', 0, '根據影片內容產生的題目', 'local'),
(114, 'jYSBsUjXXog', '在 Java 中，for 回圈的三個主要組成部分是什麼？', '初始條件、判斷條件、增量', '變數宣告、判斷條件、操作', '初始值、終止值、更新條件', '起始、循環體、結束', 0, '根據影片內容產生的題目', 'local'),
(115, 'jYSBsUjXXog', '為什麼在 Java 中 for 迴圈中宣告的變數不能在外部使用？', '因為它們是局部變數', '因為它們是全域變數', '因為它們沒有初始化', '因為它們是靜態變數', 0, '根據影片內容產生的題目', 'local'),
(116, 'jYSBsUjXXog', '在 99 乘法表的例子中，為什麼需要一個外部的迴圈來控制行數？', '因為需要控制列印格式', '因為需要控制每一行的開頭數字', '因為需要控制打印速度', '因為需要避免重複計算', 1, '根據影片內容產生的題目', 'local'),
(117, 'jYSBsUjXXog', '如何在 Java 中讓列印內容不換行？', '使用 System.out.print()', '使用 System.out.println()', '使用 System.out.printf()', '使用 System.out.write()', 0, '根據影片內容產生的題目', 'local'),
(118, 'jYSBsUjXXog', '在 99 乘法表的 Java 程式中，內層迴圈的作用是什麼？', '控制列印的格式', '計算每一個乘法的結果', '決定要處理的行數', '初始化變數', 1, '根據影片內容產生的題目', 'local'),
(119, 'jYSBsUjXXog', '佛回圈的初始條件通常在哪裡設定？', '在佛回圈的括號內', '在佛回圈的外部', '在佛回圈的中間', '在佛回圈的結尾', 0, '根據影片內容產生的題目', 'local'),
(120, 'jYSBsUjXXog', '在Java中的Println與Print的差異是什麼？', 'Println會自動換行', 'Print會自動換行', '兩者都不會換行', '兩者都會自動換行', 0, '根據影片內容產生的題目', 'local'),
(121, 'jYSBsUjXXog', '用於控制佛回圈的變數若在小括號內聲明，當佛回圈執行完後該變數的特性為何？', '變數值保留，可在外部繼續使用', '變數值不保留，無法在外部使用', '變數不可重複使用', '變數值保留，但無法在下次使用', 1, '根據影片內容產生的題目', 'local'),
(122, 'jYSBsUjXXog', '以下哪一項適合使用佛回圈來完成？', '持續等待用戶輸入直到正確', '計算1到100的總和', '在未知次數重複執行某動作', '根據條件分支選擇某一動作', 1, '根據影片內容產生的題目', 'local'),
(123, 'jYSBsUjXXog', '為什麼不推薦在佛回圈中重複貼上相同的代碼段？', '會影響程式效能', '不便於代碼維護', '會導致編譯錯誤', '不符合面向對象編程原則', 1, '根據影片內容產生的題目', 'local'),
(124, 'jYSBsUjXXog', '什麼是佛回圈的三個主要構成部分？', '初始條件、判斷條件、執行條件', '初始變數、判斷變數、執行變數', '初始條件、執行條件、結束條件', '初始值、結束值、遞增步伐', 0, '根據影片內容產生的題目', 'local'),
(125, 'jYSBsUjXXog', '佛回圈中，通常不會在哪裡宣告控制變數？', '在回圈外部', '在回圈內部', '在回圈的判斷條件中', '在回圈的執行條件中', 0, '根據影片內容產生的題目', 'local'),
(126, 'jYSBsUjXXog', '下列哪一行可以顯示99乘法表中的第二行？', '2 * i = j * i', '2 * i = 2 * i', '3 * i = 2 * i', 'j * i = 2 * i', 1, '根據影片內容產生的題目', 'local'),
(127, 'jYSBsUjXXog', '如何讓print()的輸出不換行而是在同一行繼續？', '使用Println()函數', '使用print()函數', '使用printf()函數', '使用print()並添加空格', 1, '根據影片內容產生的題目', 'local'),
(128, 'jYSBsUjXXog', '在範例中，外部的懷回圈也可以替代為什麼？', '另一個懷回圈', 'If語句', '佛回圈', 'Switch語句', 2, '根據影片內容產生的題目', 'local'),
(129, 'jYSBsUjXXog', '在 Java 中，for 迴圈中需要宣告的三個部分是什麼？', '初始條件、判斷條件、遞增或遞減動作', '判斷條件、結束條件、累加動作', '初始變數、迴圈體、結束語句', '', 0, '根據影片內容產生的題目', 'local'),
(130, 'jYSBsUjXXog', '在嵌套迴圈中，執行外部迴圈一次內部迴圈需要執行多少次？', '取決於內部迴圈的條件', '一次', '多次', '', 0, '根據影片內容產生的題目', 'local'),
(131, 'jYSBsUjXXog', '下列哪個選項說明了變數的作用範圍？', '變數在宣告所在的區域內可見', '變數在程序結束後會保留', '變數的類型決定了作用範圍', '', 0, '根據影片內容產生的題目', 'local'),
(132, 'jYSBsUjXXog', '在Java中如何印出不換行的字串？', '使用 System.out.print 方法', '使用 System.out.write 方法', '使用 System.out.println 方法', '', 0, '根據影片內容產生的題目', 'local'),
(133, 'jYSBsUjXXog', '如何在 for 迴圈中以不同的初始條件來實現九九乘法表？', '使用兩個嵌套的 for 迴圈，外圈控制乘數，內圈控制被乘數', '只用一個 for 迴圈，控制所有變數', '使用 while 迴圈控制變量', '', 0, '根據影片內容產生的題目', 'local'),
(134, 'jYSBsUjXXog', '在Java中，當你宣告一個佛回圈時，為了控制回圈執行的次數，通常會將初始變數宣告於何處？', '在回圈外面', '在回圈內部小瓜號裡面', '在方法的形參中', '在類別的屬性中', 1, '根據影片內容產生的題目', 'local'),
(135, 'jYSBsUjXXog', '下列哪個是正確的佛回圈初始化、條件判斷和增減操作的組合？', 'for(i >= 0; i++; i < 10)', 'for(i = 0; i < 10; i++)', 'for(i < 10; i = 0; i++)', 'for(i = 0; i++; i < 10)', 1, '根據影片內容產生的題目', 'local'),
(136, 'jYSBsUjXXog', '當i在佛回圈中是從1增長到9，該如何確保回圈結束時變數i的值不超過9？', '設置初始條件為i = 0', '設定回圈條件為i <= 9', '使用break語句', '在{}內的最後執行i = 9', 1, '根據影片內容產生的題目', 'local'),
(137, 'jYSBsUjXXog', '打印100次\"Hello, World!\"的最佳方法是使用哪種結構？', '一個包含100個\"System.out.println\"語句的方法', '一個有100層巢狀的if條件判斷', '一個有100項元素的數組', '一個for回圈', 3, '根據影片內容產生的題目', 'local'),
(138, 'jYSBsUjXXog', '在佛回圈中，如果你只想讓它在同一行打印結果而不換行，你應該使用哪種方法？', 'System.out.println()', 'System.out.print()', 'System.out.flush()', 'System.out.write()', 1, '根據影片內容產生的題目', 'local'),
(139, 'jYSBsUjXXog', '在 Java 中，什麼是 \'for\' 迴圈的常見用法？', '用於建立初始條件、判斷條件和增量操作', '專門用來處理浮點數運算', '只用於多維陣列操作', '用於字串連接', 0, '根據影片內容產生的題目', 'local'),
(140, 'jYSBsUjXXog', '在 \'for\' 迴圈的三個部分中，哪一個是用來決定是否繼續迴圈的執行？', '第一個部分', '第二個部分', '第三個部分', '以上皆非', 1, '根據影片內容產生的題目', 'local'),
(141, 'jYSBsUjXXog', '假設你想要在 \'for\' 迴圈中，從1到9列印所有2的倍數，哪一個操作是正確的？', 'for(int i = 1; i <= 9; i++) { System.out.print(2 * i); }', 'for(int i = 0; i < 10; i++) { System.out.print(i); }', 'for(int i = 1; i < 10; i++) { System.out.print(2 + i); }', 'for(int i = 2; i <= 18; i += 2) { System.out.print(i); }', 0, '根據影片內容產生的題目', 'local'),
(142, 'jYSBsUjXXog', '在 Java 的 \'for\' 迴圈中，變數宣告在小括號裡和外有什麼不同？', '外部宣告的變數在迴圈之外仍可被存取', '它們沒有任何不同', '內部宣告的變數在迴圈外仍可被存取', '宣告位置會改變變數類型', 0, '根據影片內容產生的題目', 'local'),
(143, 'jYSBsUjXXog', '哪一種方法可以在不換行的情況下列印輸出？', '使用 System.out.print()', '使用 System.out.println()', '使用 System.err.print()', '使用 System.console().printf()', 0, '根據影片內容產生的題目', 'local'),
(144, 'jYSBsUjXXog', '什麼是能在迴圈中設定初始條件、執行條件和操作的迴圈類型？', '佛回圈', '懷回圈', '條件迴圈', '迴圈', 0, '根據影片內容產生的題目', 'local'),
(145, 'jYSBsUjXXog', '當變數在佛回圈內部宣告時，執行完迴圈後該變數的作用範圍如何？', '變數值保持不變', '變數值會被清除', '作用範圍在迴圈內', '作用範圍在全域', 2, '根據影片內容產生的題目', 'local'),
(146, 'jYSBsUjXXog', '如果希望迴圈內容不換行印出，應該使用什麼方法？', 'System.out.println()', 'System.out.print()', 'Console.writeLine()', 'Console.log()', 1, '根據影片內容產生的題目', 'local'),
(147, 'jYSBsUjXXog', '在99乘法表的程式中，外層和內層所使用的迴圈類型各是什麼？', '外層是佛回圈，內層是懷回圈', '外層是懷回圈，內層是佛回圈', '外層是條件迴圈，內層是條件迴圈', '都是佛回圈', 1, '根據影片內容產生的題目', 'local'),
(148, 'jYSBsUjXXog', '將多行列印在同一行時，字串之間應加上什麼以便區分？', '換行', '分號', '逗號', '空格', 3, '根據影片內容產生的題目', 'local'),
(149, 'jYSBsUjXXog', '在 Java 中，for 迴圈的三個部分分別是?', '初始條件、判斷條件、後置操作', '初始條件、判斷條件、終止條件', '初始條件、後置操作、終止條件', '判斷條件、後置操作、終止條件', 0, '根據影片內容產生的題目', 'local'),
(150, 'jYSBsUjXXog', '在 Java 中，如果一個變數只在 for 迴圈內部宣告，那麼在迴圈外部，該變數的作用域為何?', '仍可存取', '將持續存在直至方法結束', '不再可見', '將一直存在於整個類別中', 2, '根據影片內容產生的題目', 'local'),
(151, 'jYSBsUjXXog', '在 Java 裡，為了避免列印後自動換行，應使用哪個函數?', 'print()', 'println()', 'printf()', 'printline()', 0, '根據影片內容產生的題目', 'local'),
(152, 'jYSBsUjXXog', '在九九乘法表中，哪個數字的倍數在舉例中最先被實現?', '1', '2', '3', '9', 1, '根據影片內容產生的題目', 'local'),
(153, 'jYSBsUjXXog', '在 Java 中，如何透過迴圈產生九九乘法表?', '使用巢狀 for 迴圈，內部迴圈遍歷乘數，外部迴圈遍歷被乘數。', '使用單一的 while 迴圈。', '僅需一個 if 條件判斷。', '無法透過程式生成，需要手動輸入。', 0, '根據影片內容產生的題目', 'local'),
(154, 'jYSBsUjXXog', '什麼是佛回圈的初始條件？', '佛回圈的初始值', '佛回圈的結束條件', '佛回圈的循環條件', '', 0, '根據影片內容產生的題目', 'local'),
(155, 'jYSBsUjXXog', '在Java中，佛回圈裡的變數宣告在內部有什麼特點？', '可以在整個程式中使用', '只在佛回圈裡有效', '不會被回圈外部的程式看到', '', 1, '根據影片內容產生的題目', 'local'),
(156, 'jYSBsUjXXog', '如何使用print函數來避免自動換行？', '使用printLine函數', '在println中加入參數', '使用print函數', '', 2, '根據影片內容產生的題目', 'local'),
(157, 'jYSBsUjXXog', '在99乘法表中，如何讓J從2到9自動遞增？', '使用單一的佛回圈', '使用內部和外部的兩層回圈', '手動一一增加', '', 1, '根據影片內容產生的題目', 'local'),
(158, 'jYSBsUjXXog', '當佛回圈的條件不滿足時會發生什麼？', '進入下一個指令', '停留在當前回圈', '跳出回圈', '', 2, '根據影片內容產生的題目', 'local'),
(159, 'jYSBsUjXXog', '佛回圈的核心結構中不需要以下哪一項？', '初始條件', '判斷條件', '結束操作', '數學運算', 3, '根據影片內容產生的題目', 'local'),
(160, 'jYSBsUjXXog', '佛回圈通常在哪個地方宣告控制變數以減少變數污染？', '在迴圈外', '在迴圈內', '在方法內', '在類別內', 1, '根據影片內容產生的題目', 'local'),
(161, 'jYSBsUjXXog', '要迴圈從1到9運行，需要將判斷條件設定為哪一項？', 'i <= 9', 'i < 9', 'i < 10', 'i <= 10', 2, '根據影片內容產生的題目', 'local'),
(162, 'jYSBsUjXXog', '99乘法表中，哪個數字不變？', '第一個數字', '第二個數字', '結束範圍', '迴圈控制變數', 0, '根據影片內容產生的題目', 'local'),
(163, 'jYSBsUjXXog', '如何讓程式在印出結果時不換行？', '使用 print()', '使用 println()', '加一個空格', '使用 print() 並加上 ;', 0, '根據影片內容產生的題目', 'local'),
(164, 'jYSBsUjXXog', '在 Java 中，當我們需要一個變數來控制回圈執行的次數，通常會將變數宣告在什麼地方？', '外面', '裡面', 'Java 不支持變數控制回圈', '上述皆非', 1, '根據影片內容產生的題目', 'local'),
(165, 'jYSBsUjXXog', '當我們想要讓 Java 的 print 方法避免換行，該使用哪個方法？', 'println', 'scanf', 'print', 'printf', 2, '根據影片內容產生的題目', 'local'),
(166, 'jYSBsUjXXog', '在 Java 中，一個典型的 for 迴圈需要幾個參數？', '1', '2', '3', '4', 2, '根據影片內容產生的題目', 'local'),
(167, 'jYSBsUjXXog', 'Java 中，如果在 for 回圈中宣告變數，當回圈結束後該變數會如何？', '會保留', '會消失', '可以在其他地方使用', '都不正確', 1, '根據影片內容產生的題目', 'local'),
(168, 'jYSBsUjXXog', '要在 Java 中列印出一個 99 乘法表，以下哪一個不正確？', '使用巢狀迴圈', '每行用 println 換行', '需要 9 個獨立的迴圈', '外層迴圈從 2 到 9', 2, '根據影片內容產生的題目', 'local'),
(169, 'jYSBsUjXXog', '什麼是佛回圈中第一個位置要放的東西？', '初始條件', '執行條件', '增量', '變數', 0, '根據影片內容產生的題目', 'local'),
(170, 'jYSBsUjXXog', '在Java中，佛回圈的第三個部分一般用於什麼？', '終止程序', '執行條件', '變數初始化', '迭代增量', 3, '根據影片內容產生的題目', 'local'),
(171, 'jYSBsUjXXog', '99乘法表從2到9的計算中，哪個變數控制行數的迭代？', 'i', 'j', 'x', 'count', 1, '根據影片內容產生的題目', 'local'),
(172, 'jYSBsUjXXog', '如何在Java中讓println方法不自動換行？', '使用print方法', '使用printlnx方法', '呼叫noNewLine方法', '修改環境設置', 0, '根據影片內容產生的題目', 'local'),
(173, 'jYSBsUjXXog', '何時可以考慮將佛回圈的初始變數宣告在小括號內？', '需要全局使用變數', '變數僅在佛回圈內使用', '需要性能優化', '需要簡化邏輯', 1, '根據影片內容產生的題目', 'local'),
(174, 'jYSBsUjXXog', '什麼是佛回圈中的三個基本元素？', '初始條件、執行條件、增量操作', '初始條件、終止條件、減量操作', '增量操作、執行條件、終止條件', '變數、常數、函數', 0, '根據影片內容產生的題目', 'local'),
(175, 'jYSBsUjXXog', '佛回圈和懷回圈的主要區別是什麼？', '佛回圈可以控制初始化、條件和增量', '懷回圈不能使用變數', '佛回圈執行更快', '懷回圈需要手動增量', 0, '根據影片內容產生的題目', 'local'),
(176, 'jYSBsUjXXog', '在佛回圈中宣告的變數與在外面宣告的差別是什麼？', '只有佛回圈內可見', '可以在整個程式中使用', '不需要初始化', '不需要指定類型', 0, '根據影片內容產生的題目', 'local'),
(177, 'jYSBsUjXXog', '為什麼要使用雙層回圈來計算99乘法表？', '方便顯示結果', '節省存儲空間', '提高計算精度', '覆蓋所有乘法組合', 3, '根據影片內容產生的題目', 'local'),
(178, 'jYSBsUjXXog', '如果在佛回圈內沒有對增量進行操作，會發生什麼？', '程式將無限循環', '程式會自動停止', '會產生錯誤提示', '只執行一次', 0, '根據影片內容產生的題目', 'local'),
(179, 'jYSBsUjXXog', '下面哪一段敘述正確描述了Java中的for迴圈特性？', 'for迴圈必須在小括號中放置三個東西：初始條件、判斷條件和執行步驟。', 'for迴圈中的變數必須在迴圈外宣告。', 'for迴圈只適合用來做簡單的疊代，不能用來控制複雜的邏輯。', 'for迴圈和while迴圈毫無區別。', 0, '根據影片內容產生的題目', 'local'),
(180, 'jYSBsUjXXog', '在Java中，for迴圈和while迴圈主要差異是什麼？', 'for迴圈是無窮迴圈，而while迴圈有限。', 'for迴圈在一個位置設定初始、條件和更新部分。', 'while迴圈總是比for迴圈執行得更快。', 'for迴圈只能用整數來控制，而while迴圈可以用任何數據類型。', 1, '根據影片內容產生的題目', 'local'),
(181, 'jYSBsUjXXog', '在Java中，什麼情況下使用for迴圈更合適？', '當需要進行不確定次數的迴圈時。', '當需要對一個固定範圍或確定次數執行迴圈時。', '當需要不間斷地執行某個操作時。', '當只需要判斷條件而不需要更新條件時。', 1, '根據影片內容產生的題目', 'local'),
(182, 'jYSBsUjXXog', '在進行九九乘法表的Java實作時，哪一個迴圈最適合內層迴圈用來控制每一行的運算？', '使用while迴圈', '使用for迴圈', '使用do-while迴圈', '使用嵌套if結構', 1, '根據影片內容產生的題目', 'local'),
(183, 'jYSBsUjXXog', '以下哪一個步驟可以改善兩個嵌套迴圈的可讀性？', '將內部迴圈的變數宣告放到外部迴圈的前面。', '在內部迴圈後加入註釋說明目的。', '確保每個迴圈中進行適當的縮排和註解。', '避免在外部迴圈中使用任何控制變數。', 2, '根據影片內容產生的題目', 'local'),
(184, 'jYSBsUjXXog', '佛回圈與懷回圈的差別是什麼？', '佛回圈需要指定初始條件、結束條件和迭代方式', '懷回圈不需要指定初始條件', '佛回圈只能用於數值變量', '懷回圈執行速度較快', 0, '根據影片內容產生的題目', 'local'),
(185, 'jYSBsUjXXog', '在Java中，哪種情況下常會將變數宣告在佛回圈裡面？', '變數需要在外部重複使用', '變數僅用於控制回圈次數', '變數需要長時間保存', '變數不能是整數類型', 1, '根據影片內容產生的題目', 'local'),
(186, 'jYSBsUjXXog', '以下哪一項是99乘法表中需要調整的部分？', '加上答案的運算', '顯示空格以便於閱讀', '使用懷回圈控制行數', '更換各個回圈的初始值', 1, '根據影片內容產生的題目', 'local'),
(187, 'jYSBsUjXXog', '如何優化列出99乘法表的方法？', '用懷回圈包住多個佛回圈', '用內嵌的佛回圈替換外層的懷回圈', '每行手動複製貼上', '使用遞迴代替迴圈', 1, '根據影片內容產生的題目', 'local'),
(188, 'jYSBsUjXXog', '在Java的佛回圈中，如何避免執行迴圈次數不正確的問題？', '確保條件變數在每次迭代中更新', '使用全局變數儲存迴圈條件', '將所有的運算寫在同一行', '在迴圈中加入延遲函數', 0, '根據影片內容產生的題目', 'local'),
(189, 'jYSBsUjXXog', '在 Java 中，如何簡化對小於 100 的數字執行某個操作的 for 回圈？', '使用 while 回圈', '使用 do-while 回圈', '嵌套多個 for 回圈', '將變數宣告在 for 回圈裡面', 3, '根據影片內容產生的題目', 'local'),
(190, 'jYSBsUjXXog', '如果需要在一行中顯示所有計算結果，應該使用哪個方法？', 'print 方法', 'println 方法', 'printf 方法', 'write 方法', 0, '根據影片內容產生的題目', 'local'),
(191, 'jYSBsUjXXog', '在 Java 中，如果你想從 2 到 9 印出乘法表，應該如何設置外層回圈的變數與條件？', '使 J 從 1 到 10', '使 J 從 1 到 9', '使 J 從 2 到 10', '使 J 從 2 到 9', 3, '根據影片內容產生的題目', 'local'),
(192, 'jYSBsUjXXog', '如果希望在for迴圈之外繼續使用一個變數，應如何宣告該變數？', '在方法裡宣告', '在 for 迴圈之外宣告', '在 for 迴圈括號裡宣告', '在類別外宣告', 1, '根據影片內容產生的題目', 'local'),
(193, 'jYSBsUjXXog', '上的範例中，如果將 While 換為 for，變數 J 的初始化值該如何設定？', 'for(int J = 1; J < 10; J++)', 'for(int J = 2; J < 10; J++)', 'for(int J = 2; J <= 9; J++)', 'for(int J = 0; J <= 9; J++)', 2, '根據影片內容產生的題目', 'local'),
(194, 'jYSBsUjXXog', '佛回圈與懷回圈在基本結構上的不同之處是什麼？', '佛回圈有三個主要部分', '懷回圈有兩個主要部分', '佛回圈使用If條件', '懷回圈使用For條件', 0, '根據影片內容產生的題目', 'local'),
(195, 'jYSBsUjXXog', '在Java中，為什麼通常將佛回圈的變數宣告在回圈內？', '避免變數外溢出回圈影響後續程式', '增加程式執行效率', '方便與其他語言兼容', '系統限制', 0, '根據影片內容產生的題目', 'local'),
(196, 'jYSBsUjXXog', '若要讓一組程式碼在不改變行為的情況下換成使用佛回圈，應注意什麼？', '初始條件、終止條件和遞增語句', '函數名稱的更改', '變數類型的轉換', '編輯器版本', 0, '根據影片內容產生的題目', 'local'),
(197, 'jYSBsUjXXog', '在九九乘法表的例子中，如何改變程式以達到整齊的輸出形式？', '使用Print函數代替Println函數', '增加換行符號', '使用特定的縮排格式', '手動調整輸出間距', 0, '根據影片內容產生的題目', 'local'),
(198, 'jYSBsUjXXog', '為什麼在Java中不建議在佛回圈中持續使用相同變數而不改變其值？', '這會造成無限循環', '這樣可以提高執行速度', '語法上不允許', '影響程序的可讀性', 0, '根據影片內容產生的題目', 'local'),
(199, 'jYSBsUjXXog', '在Java中，若要印出九九乘法表，我們需要用到哪種迴圈來處理多個數字的相乘？', 'for迴圈', 'while迴圈', 'do-while迴圈', 'foreach迴圈', 0, '根據影片內容產生的題目', 'local'),
(200, 'jYSBsUjXXog', '在九九乘法表中，我們設置初始條件為2的變數名稱通常會選擇用哪一個？', 'i', 'j', 'k', 'n', 1, '根據影片內容產生的題目', 'local'),
(201, 'jYSBsUjXXog', '以下哪一個選項是在Java中不讓迴圈執行後自動換行印出的函數？', 'System.out.print', 'System.out.println', 'System.out.printf', 'System.out.write', 0, '根據影片內容產生的題目', 'local'),
(202, 'jYSBsUjXXog', '在九九乘法表中，要如何處理個別乘法結果以分隔符號顯示，使其更易讀？', '在結果後面加一個空格', '用逗號隔開', '用引號隔開', '不用分隔符號', 0, '根據影片內容產生的題目', 'local'),
(203, 'jYSBsUjXXog', '撰寫九九乘法表不僅要用到巢狀迴圈，也需要選擇正確的條件判斷，請問以下何者為判斷迴圈結束的正確方法？', '當變數小於等於9時', '當變數大於9時', '當變數不等於9時', '當變數等於9時', 1, '根據影片內容產生的題目', 'local'),
(204, 'jYSBsUjXXog', '在 Java 中，若在 for 回圈中宣告變數，該變數的作用範圍如何？', '僅在該 for 回圈內有效', '在整個方法內都有效', '在類別內都有效', '在整個專案內都有效', 0, '根據影片內容產生的題目', 'local'),
(205, 'jYSBsUjXXog', '在 for 回圈中，若初始值為 i=1，條件為 i<10，最常見的增量為 i++，則該回圈執行次數為多少？', '8次', '9次', '10次', '11次', 1, '根據影片內容產生的題目', 'local'),
(206, 'jYSBsUjXXog', '在 99 乘法表的例子中，哪個數字是『不變』的？', '2', 'i 的值', '樂符號', '答案值', 0, '根據影片內容產生的題目', 'local'),
(207, 'jYSBsUjXXog', '在 Java 中，print 和 println 方法的差異為？', 'print 不會自動換行，println 會自動換行', 'print 會自動換行，println 不會自動換行', '兩者都不會自動換行', '兩者都會自動換行', 0, '根據影片內容產生的題目', 'local'),
(208, 'jYSBsUjXXog', '如何避免在 99 乘法表打印時，每個結果之間無空格的問題？', '在 print 中加入空格', '使用 println 方法', '調整 for 回圈結束條件', '改用 while 回圈', 0, '根據影片內容產生的題目', 'local'),
(209, 'jYSBsUjXXog', '什麼是佛回圈？', '一種類似懷回圈的結構，但需要三個條件', '一種專門用來印出數字的函數', '一種儲存資料的結構', '一種檢查程式錯誤的方法', 0, '根據影片內容產生的題目', 'local'),
(210, 'jYSBsUjXXog', '在佛回圈中第一個位置應該放什麼？', '結束條件', '初始條件', '遞減操作', '判斷變數', 1, '根據影片內容產生的題目', 'local'),
(211, 'jYSBsUjXXog', '下列哪個符號通常用於表示乘法？', '+', '-', '*', '/', 2, '根據影片內容產生的題目', 'local'),
(212, 'jYSBsUjXXog', '如何在 print 方法中不換行？', '使用 print 取代 println', '指定分隔符號', '使用 getline 方法', '加入換行符號', 0, '根據影片內容產生的題目', 'local'),
(213, 'jYSBsUjXXog', '要讓一個浮回圈從 2 執行到 9，外層的變數應從多少開始逐步增加？', '從 0 開始', '從 2 開始', '從 1 開始', '從 9 開始', 1, '根據影片內容產生的題目', 'local'),
(214, 'jYSBsUjXXog', '在 Java 中，以下哪個關鍵字用於聲明類別？', 'class', 'method', 'variable', 'function', 0, '根據影片內容產生的題目', 'local'),
(215, 'jYSBsUjXXog', '下列哪一個是 Java 的基本資料型別？', 'String', 'Integer', 'Boolean', 'List', 2, '根據影片內容產生的題目', 'local'),
(216, 'jYSBsUjXXog', '在 Java 中，使用哪個關鍵字可以創建一個物件？', 'new', 'create', 'build', 'object', 0, '根據影片內容產生的題目', 'local'),
(217, 'jYSBsUjXXog', '如何在 Java 中聲明一個名為 count 的整型變數？', 'integer count;', 'int count;', 'num count;', 'var count;', 1, '根據影片內容產生的題目', 'local'),
(218, 'jYSBsUjXXog', '在 Java 中，分號在程式中扮演什麼角色？', '表示註解的開始', '標記語句的結尾', '表示迴圈的開始', '用來分隔陣列', 1, '根據影片內容產生的題目', 'local'),
(219, 'jYSBsUjXXog', '在 Java 中，哪個關鍵字用於聲明常數變量？', 'final', 'constant', 'static', 'const', 0, '根據影片內容產生的題目', 'local'),
(220, 'jYSBsUjXXog', '以下何者為正確的 Java 起始類別和方法？', 'public class Main {}', 'public static void Main(String[] args) {}', 'public static void main(String[] args) {}', 'public Main(String[] args) {}', 2, '根據影片內容產生的題目', 'local'),
(221, 'jYSBsUjXXog', '在 Java 中，哪一個運算子用於比較兩個值是否相等？', '=', '==', 'equals', '===', 1, '根據影片內容產生的題目', 'local'),
(222, 'jYSBsUjXXog', '以下哪個類別用於讀取使用者輸入？', 'BufferedReader', 'Scanner', 'InputStream', 'Reader', 1, '根據影片內容產生的題目', 'local'),
(223, 'jYSBsUjXXog', '若要在 Java 中聲明一個整數陣列，且長度為 5，哪個語法正確？', 'int[] array = new int(5);', 'int array[5] = new int[];', 'int[] array = new int[5];', 'int array[] = int[5];', 2, '根據影片內容產生的題目', 'local');

-- --------------------------------------------------------

--
-- 資料表結構 `quiz_results`
--

CREATE TABLE `quiz_results` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `video_id` varchar(50) NOT NULL,
  `total_questions` int(11) DEFAULT NULL,
  `correct_answers` int(11) DEFAULT NULL,
  `score` decimal(5,2) DEFAULT NULL,
  `submitted_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- 傾印資料表的資料 `quiz_results`
--

INSERT INTO `quiz_results` (`id`, `user_id`, `video_id`, `total_questions`, `correct_answers`, `score`, `submitted_at`) VALUES
(2, 123, '0tbJh5LovJM', 5, 0, NULL, '2025-06-07 08:30:29'),
(3, 123, '0tbJh5LovJM', 5, 0, NULL, '2025-06-07 08:33:22'),
(4, 123, '0tbJh5LovJM', 5, 2, NULL, '2025-06-07 08:35:11'),
(5, 123, '0tbJh5LovJM', 5, 1, NULL, '2025-06-07 08:37:12'),
(6, 123, '0tbJh5LovJM', 5, 1, NULL, '2025-06-07 08:40:31'),
(7, 123, '0tbJh5LovJM', 5, 1, NULL, '2025-06-07 08:44:21'),
(8, 123, '0tbJh5LovJM', 5, 2, NULL, '2025-06-07 14:34:40'),
(9, 123, '0tbJh5LovJM', 5, 3, NULL, '2025-06-07 14:36:03'),
(10, 123, '0tbJh5LovJM', 5, 2, NULL, '2025-06-07 14:47:30'),
(11, 123, '0tbJh5LovJM', 5, 2, NULL, '2025-06-07 14:47:46'),
(12, 123, '0tbJh5LovJM', 5, 2, NULL, '2025-06-07 14:58:14'),
(13, 123, '0tbJh5LovJM', 5, 2, NULL, '2025-06-07 14:58:26'),
(14, 123, '0tbJh5LovJM', 5, 2, NULL, '2025-06-07 15:10:04'),
(15, 123, '0tbJh5LovJM', 5, 2, NULL, '2025-06-07 15:10:26'),
(16, 123, '0tbJh5LovJM', 5, 0, NULL, '2025-06-07 15:13:29'),
(17, 123, '0tbJh5LovJM', 5, 2, NULL, '2025-06-07 15:18:26'),
(18, 123, '0tbJh5LovJM', 5, 2, NULL, '2025-06-07 15:23:45'),
(19, 123, '0tbJh5LovJM', 5, 3, NULL, '2025-06-07 15:27:41'),
(20, 123, '0tbJh5LovJM', 5, 0, NULL, '2025-06-07 15:38:11'),
(21, 123, '0tbJh5LovJM', 5, 3, NULL, '2025-06-07 15:40:16'),
(22, 123, '0tbJh5LovJM', 5, 3, NULL, '2025-06-07 15:45:08'),
(23, 123, '0tbJh5LovJM', 5, 3, NULL, '2025-06-07 15:45:24'),
(24, 123, '0tbJh5LovJM', 5, 4, NULL, '2025-06-07 15:51:12'),
(25, 123, '0tbJh5LovJM', 5, 0, NULL, '2025-06-08 03:49:50'),
(26, 123, 'jYSBsUjXXog', 5, 4, NULL, '2025-06-08 04:53:50'),
(27, 123, 'jYSBsUjXXog', 5, 4, NULL, '2025-06-08 04:58:16'),
(28, 123, 'jYSBsUjXXog', 5, 4, NULL, '2025-06-08 04:59:29'),
(29, 123, 'jYSBsUjXXog', 5, 4, NULL, '2025-06-08 05:03:44'),
(30, 123, 'jYSBsUjXXog', 5, 4, NULL, '2025-06-08 05:07:00'),
(31, 123, 'jYSBsUjXXog', 5, 4, NULL, '2025-06-08 05:13:24'),
(32, 123, 'jYSBsUjXXog', 5, 4, NULL, '2025-06-08 05:16:02'),
(33, 123, 'jYSBsUjXXog', 5, 4, NULL, '2025-06-08 05:18:58'),
(34, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-08 05:25:56'),
(35, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-08 05:40:16'),
(36, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-08 07:10:46'),
(37, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-08 07:11:10'),
(38, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-08 07:11:22'),
(39, 123, 'jYSBsUjXXog', 5, 4, NULL, '2025-06-08 07:16:59'),
(40, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-08 07:19:56'),
(41, 123, 'jYSBsUjXXog', 5, 4, NULL, '2025-06-08 07:30:24'),
(42, 123, 'jYSBsUjXXog', 5, 5, NULL, '2025-06-08 07:39:05'),
(43, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-08 15:27:15'),
(44, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-08 15:27:35'),
(45, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-08 15:27:54'),
(46, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-08 15:34:02'),
(47, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-08 15:53:30'),
(48, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-08 16:08:05'),
(49, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-08 16:08:23'),
(50, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-08 16:22:50'),
(51, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-09 01:48:21'),
(52, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-09 01:48:45'),
(53, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-09 01:52:55'),
(54, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-09 01:53:01'),
(55, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-09 01:55:10'),
(56, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-09 01:55:10'),
(57, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-09 01:55:10'),
(58, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-09 01:55:10'),
(59, 123, 'jYSBsUjXXog', 5, 5, NULL, '2025-06-09 01:58:03'),
(60, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-09 02:03:28'),
(61, 123, 'jYSBsUjXXog', 5, 0, NULL, '2025-06-09 02:03:41'),
(62, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 02:11:34'),
(63, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 02:19:21'),
(64, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 02:20:07'),
(65, 123, 'jYSBsUjXXog', 5, 1, NULL, '2025-06-09 03:02:27'),
(66, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 03:10:19'),
(67, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 03:17:05'),
(68, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 03:23:36'),
(69, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 03:31:21'),
(70, 123, 'jYSBsUjXXog', 5, 1, NULL, '2025-06-09 03:59:01'),
(71, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-09 05:21:02'),
(72, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 05:40:35'),
(73, 123, 'jYSBsUjXXog', 5, 1, NULL, '2025-06-09 06:34:44'),
(74, 123, 'jYSBsUjXXog', 5, 1, NULL, '2025-06-09 06:41:26'),
(75, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-09 06:47:36'),
(76, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 06:49:24'),
(77, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 06:52:55'),
(78, 123, 'jYSBsUjXXog', 5, 1, NULL, '2025-06-09 07:39:05'),
(79, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 07:50:18'),
(80, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-09 07:50:47'),
(81, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-09 08:05:08'),
(82, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-09 08:06:11'),
(83, 123, 'jYSBsUjXXog', 5, 4, NULL, '2025-06-09 14:42:52'),
(84, 123, 'jYSBsUjXXog', 5, 1, NULL, '2025-06-09 14:59:13'),
(85, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-10 01:13:46'),
(86, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-10 01:28:25'),
(87, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-10 01:31:58'),
(88, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-10 01:32:07'),
(89, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-10 01:34:02'),
(90, 123, 'jYSBsUjXXog', 5, 2, NULL, '2025-06-10 01:36:02'),
(91, 123, 'jYSBsUjXXog', 5, 3, NULL, '2025-06-10 01:36:39');

-- --------------------------------------------------------

--
-- 資料表結構 `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `username` varchar(50) NOT NULL,
  `password` varchar(255) NOT NULL,
  `exp` int(11) DEFAULT 0,
  `email` varchar(100) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- 傾印資料表的資料 `users`
--

INSERT INTO `users` (`id`, `username`, `password`, `exp`, `email`, `created_at`) VALUES
(1, 'testuser', '123456', 58, 'test@example.com', '2025-06-04 06:36:17'),
(123, '測試用戶', 'test1234', 0, NULL, '2025-06-07 08:30:16');

-- --------------------------------------------------------

--
-- 資料表結構 `video`
--

CREATE TABLE `video` (
  `id` varchar(100) NOT NULL,
  `video_id` varchar(20) NOT NULL,
  `title` text DEFAULT NULL,
  `description` text DEFAULT NULL,
  `thumbnail_url` text DEFAULT NULL,
  `published_at` datetime DEFAULT NULL,
  `youtube_url` text DEFAULT NULL,
  `audio_path` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- 傾印資料表的資料 `video`
--

INSERT INTO `video` (`id`, `video_id`, `title`, `description`, `thumbnail_url`, `published_at`, `youtube_url`, `audio_path`) VALUES
('1', '0tbJh5LovJM', '#4 Java程式設計新手教學 - 整數與小數', '在這次的教學中我簡單地示範了整數和小數的使用，以及在做四則運算時所須注意的一些事項。\n注意: 這裡我所稱的「物件」只是泛指各種儲存資料的東西(像是能拿來存數字、字串等等)，但嚴格來講這樣說並不是很精確，在初級教學中會提到更嚴謹的定義。\n\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/0tbJh5LovJM/maxresdefault.webp', '2015-03-02 00:00:00', 'https://www.youtube.com/watch?v=0tbJh5LovJM', NULL),
('10', 'paq-yxtkMVo', '#13 Java程式設計新手教學 - for迴圈(2): 實際應用 - 九九乘法表', '這次的教學教大家如何將for迴圈實際應用在一個常見的例子中。\n\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/paq-yxtkMVo/maxresdefault.webp', '2015-05-30 00:00:00', 'https://www.youtube.com/watch?v=paq-yxtkMVo', NULL),
('11', 'qyBaEK2t8Gw', '#14 Java程式設計新手教學 - 圓周率計算 (THE END)', '在這次的教學中，綜合了過去所學，有別於許多複雜的數學方法，使用了一個簡單且有趣的概念來計算圓周率；同時這也是新手教學系列的最終章，謝謝各位在這段時間的支持!\n\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/qyBaEK2t8Gw/maxresdefault.webp', '2015-07-03 00:00:00', 'https://www.youtube.com/watch?v=qyBaEK2t8Gw', NULL),
('12', 'uFkDzWSWh1Y', '#5 Java程式設計新手教學 - 字元、註解和簡單的運算子', '簡單介紹字元的使用以及註解語法，最後提到了三個大家可能沒聽過，卻在程式設計中很常用到的運算子。\n\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/uFkDzWSWh1Y/maxresdefault.webp', '2015-03-09 00:00:00', 'https://www.youtube.com/watch?v=uFkDzWSWh1Y', NULL),
('14', 'wZ_ey2wsA0k', '#6 Java程式設計新手教學 - 使用者輸入與boolean & if-else語法 (1)', '在這次教學中我示範了在Java如何讀取使用者的輸入與簡介boolean型態，隨後實地演示了基本款的if-else語法。\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/wZ_ey2wsA0k/maxresdefault.webp', '2015-03-24 00:00:00', 'https://www.youtube.com/watch?v=wZ_ey2wsA0k', NULL),
('15', 'x258Z_cCZLA', '#11 Java程式設計新手教學 - switch語法', '在這次的教學中我簡單介紹了switch語法，並大略說明了該語法為何會優於多層的if-else。\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/x258Z_cCZLA/maxresdefault.webp', '2015-05-07 00:00:00', 'https://www.youtube.com/watch?v=x258Z_cCZLA', NULL),
('2', '1gXDDAcr29I', '#12 Java程式設計新手教學 - for迴圈(1): 語法簡介', 'for迴圈的教學將分為兩個部分: 語法介紹和實際應用。這次的教學中我簡單介紹了for迴圈，並希望大家藉由了解for迴圈的運作邏輯來認識這個新的語法。\n\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/1gXDDAcr29I/maxresdefault.webp', '2015-05-15 00:00:00', 'https://www.youtube.com/watch?v=1gXDDAcr29I', NULL),
('3', '3yH2PgmUecI', '#3 Java程式設計新手教學 - 第一個Java程式 (Java For Absolute Beginners - Your 1st Java Application)', '在這次教學中我簡單的講述了一個程式該有的基本架構，並實地示範了傳統的Hello World程式，同時引入了將字串物件化的概念。\n\nIn this tutorial demonstrated how a Hello World program is built, with a brief concept explanation of String objects.\n\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/3yH2PgmUecI/maxresdefault.webp', '2015-02-05 00:00:00', 'https://www.youtube.com/watch?v=3yH2PgmUecI', NULL),
('4', 'AXHdPEInANk', '#8 Java程式設計新手教學 - 淺談指派運算子', '在這次的教學中我簡單介紹了指派運算子的使用方法，為接下來的迴圈教學鋪路。\n\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/AXHdPEInANk/maxresdefault.webp', '2015-04-14 00:00:00', 'https://www.youtube.com/watch?v=AXHdPEInANk', NULL),
('5', 'eoFAL5OQl14', '#7 Java程式設計新手教學 - 使用者輸入與boolean & if-else語法 (2) + 剪刀石頭布遊戲', '這次的教學延續了上次的進度，且綜合運用了使用者輸入和if-else語法，並示範如何撰寫一個電腦會穩贏的\"剪刀石頭布\"遊戲。\n\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/eoFAL5OQl14/maxresdefault.webp', '2015-04-07 00:00:00', 'https://www.youtube.com/watch?v=eoFAL5OQl14', NULL),
('6', 'evIGdOzKCYk', '#1 Java程式設計新手教學 - 安裝JDK與Eclipse (Java For Absolute Beginners - JDK & Eclipse Installation)', '如有遇到問題歡迎在下方留言，我會一一回覆。\nIf there\'s any problem, feel free to comment below. I\'ll reply as soon as I can.\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/evIGdOzKCYk/maxresdefault.webp', '2015-01-20 00:00:00', 'https://www.youtube.com/watch?v=evIGdOzKCYk', NULL),
('7', 'ix672J7uVQs', '#10 Java程式設計新手教學 - 猜數字遊戲', '這次的教學旨在教導大家如何撰寫一個簡單的猜數字遊戲，並綜合運用了目前我們所學到的一切。\n\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/ix672J7uVQs/maxresdefault.webp', '2015-04-30 00:00:00', 'https://www.youtube.com/watch?v=ix672J7uVQs', NULL),
('8', 'jYSBsUjXXog', '#9 Java程式設計新手教學 - while迴圈', '以一個簡單的範例作為開頭－－數學家高斯的故事，讓大家能深刻體會使用while迴圈如何可以節省大量寫程式的時間，並同時讓程式碼更為簡潔。\n\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/jYSBsUjXXog/maxresdefault.webp', '2015-04-21 00:00:00', 'https://www.youtube.com/watch?v=jYSBsUjXXog', NULL),
('9', 'Kk2vbVkzmSI', '#2 Java程式設計新手教學 - 介面簡介與基本觀念 (Java For Absolute Beginners - Brief Intro to Java Programming)', 'Eclipse基本介面簡介與workspace的設定，並引入了從編寫程式到電腦執行程式間的簡單概念。\n\n============\nGitHub: https://github.com/TzuChieh\nFacebook page: https://www.facebook.com/tccthedeveloper/', 'https://i.ytimg.com/vi_webp/Kk2vbVkzmSI/maxresdefault.webp', '2015-01-21 00:00:00', 'https://www.youtube.com/watch?v=Kk2vbVkzmSI', NULL);

-- --------------------------------------------------------

--
-- 資料表結構 `watch_progress`
--

CREATE TABLE `watch_progress` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `video_id` int(11) NOT NULL,
  `current_time_sec` int(11) DEFAULT 0,
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- 已傾印資料表的索引
--

--
-- 資料表索引 `answer`
--
ALTER TABLE `answer`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `quiz`
--
ALTER TABLE `quiz`
  ADD PRIMARY KEY (`id`),
  ADD KEY `fk_video_quiz` (`video_id`);

--
-- 資料表索引 `quiz_results`
--
ALTER TABLE `quiz_results`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `quiz_results_fk_video` (`video_id`);

--
-- 資料表索引 `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `username` (`username`);

--
-- 資料表索引 `video`
--
ALTER TABLE `video`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `video_id` (`video_id`);

--
-- 資料表索引 `watch_progress`
--
ALTER TABLE `watch_progress`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `user_id` (`user_id`,`video_id`),
  ADD KEY `watch_progress_fk_video` (`video_id`);

--
-- 在傾印的資料表使用自動遞增(AUTO_INCREMENT)
--

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `answer`
--
ALTER TABLE `answer`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1049;

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `quiz`
--
ALTER TABLE `quiz`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=224;

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `quiz_results`
--
ALTER TABLE `quiz_results`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=92;

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=124;

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `watch_progress`
--
ALTER TABLE `watch_progress`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 已傾印資料表的限制式
--

--
-- 資料表的限制式 `quiz`
--
ALTER TABLE `quiz`
  ADD CONSTRAINT `fk_video_quiz` FOREIGN KEY (`video_id`) REFERENCES `video` (`video_id`);

--
-- 資料表的限制式 `quiz_results`
--
ALTER TABLE `quiz_results`
  ADD CONSTRAINT `quiz_results_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);

--
-- 資料表的限制式 `watch_progress`
--
ALTER TABLE `watch_progress`
  ADD CONSTRAINT `watch_progress_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
